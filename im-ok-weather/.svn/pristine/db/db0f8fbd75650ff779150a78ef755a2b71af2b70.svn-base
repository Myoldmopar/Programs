#!/usr/bin/python

from gi.repository import Notify
import re
import urllib2
import appindicator
import gtk
from datetime import datetime
import time
import gobject
import os
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from configobj import ConfigObj
import easygui

class Weather(object):

    def destroy(self, widget):
        gtk.main_quit()

    def __init__(self):
        
        # init some global "constants"
        self.url = "http://www.mesonet.org/data/public/mesonet/current/current.csv.txt"
        self.degree_symbol = unichr(176)
        
        # init configurable parameters
        self.update_interval_ms = 300000 # 3e5 ms = 300 seconds = 5 minutes = mesonet update frequency
        self.mesonet_location_tag = 'STIL'
        
        # init parameters derived from configuration
        self.locale_name = "Oklahoma"
        
        # override default configuration with saved data
        self.read_config_file()
        
        # flush output config...not necessary except to create a one-time init file...
        self.write_config_file()
        
        # init other global variables
        self.plotX = []
        self.plotY = []
        
        # init the notification system
        Notify.init ('Application')
        
        # initi the gtk menu
        self.init_menu()
        
        # init the app-indicator ability
        self.ind = appindicator.Indicator("example client","", appindicator.CATEGORY_APPLICATION_STATUS)
        self.ind.set_status(appindicator.STATUS_ACTIVE)
        self.ind.set_menu(self.menu)
        
        # do a refresh once initially
        self.do_a_refresh()
        
        # then set up the timer
        self.timer = gobject.timeout_add(self.update_interval_ms, self.do_a_refresh)

    def read_config_file(self):
        if not os.path.exists('.im-ok-weather'):
            return          
        config = ConfigObj('.im-ok-weather')
        self.update_interval_ms = int(config['update_interval_ms'])
        self.mesonet_location_tag = config['mesonet_location_tag']
        
    def write_config_file(self):
        config = ConfigObj('.im-ok-weather')
        config['update_interval_ms'] = self.update_interval_ms
        config['mesonet_location_tag'] = self.mesonet_location_tag
        config.write()
        
    def init_menu(self):
        
        # create a gtkMenu for the appindicator
        self.menu = gtk.Menu()
                
        # force a refresh item
        self.menu_force_item = gtk.MenuItem("Refresh now")
        self.menu.append(self.menu_force_item)
        self.menu_force_item.show()
        self.menu_force_item.connect("activate",self.do_a_refresh_capture)

        # plot history
        self.menu_plot_item = gtk.MenuItem("Plot history")
        self.menu.append(self.menu_plot_item)
        self.menu_plot_item.show()
        self.menu_plot_item.connect("activate",self.plot)

        # separator for cleanliness
        self.menu_sep_item = gtk.SeparatorMenuItem()
        self.menu.append(self.menu_sep_item)
        self.menu_sep_item.show()
        
        ###
        # current settings will be dynamic, update these in a separate worker
        self.init_dynamicSettings_menu()
        ###
        
        # updated time item
        self.menu_update_item = gtk.MenuItem("Initializing...")
        self.menu.append(self.menu_update_item)
        self.menu_update_item.show()
        
        # separator for cleanliness
        self.menu_sep_item2 = gtk.SeparatorMenuItem()
        self.menu.append(self.menu_sep_item2)
        self.menu_sep_item2.show()
        
        # item to update settings
        self.menu_settings_item = gtk.MenuItem("Update settings...")
        self.menu.append(self.menu_settings_item)
        self.menu_settings_item.show()
        self.menu_settings_item.connect("activate",self.update_settings)
        
        # separator for cleanliness
        self.menu_sep_item3 = gtk.SeparatorMenuItem()
        self.menu.append(self.menu_sep_item3)
        self.menu_sep_item3.show()        
        
        # quit item
        self.menu_quit_item = gtk.MenuItem("Quit")
        self.menu.append(self.menu_quit_item)
        self.menu_quit_item.show()
        self.menu_quit_item.connect("activate",self.destroy)

    def init_dynamicSettings_menu(self):
        
        # current location item
        self.menu_cur_item = gtk.MenuItem("Current location keyword: %s" % self.mesonet_location_tag)
        self.menu.append(self.menu_cur_item)
        self.menu_cur_item.show()
        
        # current interval item
        self.menu_curtime_item = gtk.MenuItem("Current update interval: %sms" % self.update_interval_ms)
        self.menu.append(self.menu_curtime_item)
        self.menu_curtime_item.show()

    def update_settings(self, widget):
        easygui.msgbox("Not yet implemented...for now just modify the .im-ok-weather file in the current directory: " + os.getcwd())
        self.init_dynamicSettings_menu()
        return
                
    def do_a_refresh_capture(self, widget):
        self.do_a_refresh()

    def do_a_refresh(self):
                
        # open the site, and read the results into a variable
        f = urllib2.urlopen(self.url)
        result = f.read()
        
        # split the result into a list, one item per line of the original data
        listA = result.split('\n')
        
        # parse out Stillwater's data
        expr = re.compile('^'+self.mesonet_location_tag)
        data = filter(expr.search,listA)
        tokens = [x.strip() for x in data[0].split(',')]
        temp = int(tokens[10])
        windspeed = int(tokens[16])
        winddir = str(tokens[15])
        self.locale_name = tokens[1]
        
        # create an update string
        sIndicator = " ~ %s %sF ~ %s %s ~ " % (str(temp), self.degree_symbol, str(windspeed), winddir)
        
        # this will be used a few times here
        thistime = datetime.now()
                
        # update the menu item to say we have updated
        self.menu_update_item.set_label(thistime.strftime("Updated at: %Y-%b-%d %H:%M:%S"))
        
        # update the indicator label with new data
        self.ind.set_label(sIndicator)
        
        # send a notification message
        if os.path.isdir("/home/edwin/Programs/im-ok-weather"):
            wd = "/home/edwin/Programs/im-ok-weather"
        else:
            wd = os.getcwd() # will default to $HOME if opened from Unity
        sNotify = "Temperature:\t%s\nWind Speed:\t%s\nWind Direction:\t%s" % (str(temp), str(windspeed), winddir)
        self.notification = Notify.Notification.new (self.locale_name + " Weather Updated", sNotify, wd + "/icon.png") 
        self.notification.show()
        
        # store the current time and temperature for plotting
        thistime_num = matplotlib.dates.date2num(thistime)
        self.plotX.append(thistime_num)
        self.plotY.append(temp)
        #print self.plotX
        #print self.plotY
        
        # callback return value, so that gobject knows it can continue cycling
        return True
                
    def plot(self, widget):
        plt.plot_date(self.plotX, self.plotY, fmt='bo', tz=None, xdate=True)
        plt.show()
                
    def main(self):
        gtk.main()

if __name__ == "__main__":        
    Weather().main()
   
