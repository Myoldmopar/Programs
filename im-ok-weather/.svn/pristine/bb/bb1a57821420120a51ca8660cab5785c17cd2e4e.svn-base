#!/usr/bin/python

from gi.repository import Notify
import re
import urllib2
import appindicator
import gtk
from datetime import datetime
import time
import gobject
import os

class Weather(object):

    def destroy(self, widget):
        gtk.main_quit()

    def __init__(self):
        
        # init some global "constants"
        self.url = "http://www.mesonet.org/data/public/mesonet/current/current.csv.txt"
        self.degree_symbol = unichr(176)
        
        # init the notification system
        Notify.init ('Application')
        
        # create a gtkMenu for the appindicator
        self.menu = gtk.Menu()
        
	### start adding menu items ###

	# updated time item
        self.menu_update_item = gtk.MenuItem("Initializing...")
        self.menu.append(self.menu_update_item)
        self.menu_update_item.show()
        
	# force a refresh item
	self.menu_force_item = gtk.MenuItem("Refresh now")
	self.menu.append(self.menu_force_item)
	self.menu_force_item.show()
	self.menu_force_item.connect("activate",self.do_a_refresh)

	# separator for cleanliness
        self.menu_sep_item = gtk.SeparatorMenuItem()
        self.menu.append(self.menu_sep_item)
        self.menu_sep_item.show()
        
	# quit item
        self.menu_quit_item = gtk.MenuItem("Quit")
        self.menu.append(self.menu_quit_item)
        self.menu_quit_item.show()
        self.menu_quit_item.connect("activate",self.destroy)
        
        # init the app-indicator ability
        self.ind = appindicator.Indicator("example client","", appindicator.CATEGORY_APPLICATION_STATUS)
        self.ind.set_status(appindicator.STATUS_ACTIVE)
        self.ind.set_menu(self.menu)
        
        # do a refresh once initially
        self.do_a_refresh()
        
        # then set up the timer
        update_interval_ms = 300000 # 3e5 ms = 300 seconds = 5 minutes = mesonet update frequency
        self.timer = gobject.timeout_add(update_interval_ms, self.do_a_refresh)

    def do_a_refresh(self):
                
        # open the site, and read the results into a variable
        f = urllib2.urlopen(self.url)
        result = f.read()
        
        # split the result into a list, one item per line of the original data
        listA = result.split('\n')
        
        # parse out Stillwater's data
        expr = re.compile('^STIL')
        data = filter(expr.search,listA)
        tokens = [x.strip() for x in data[0].split(',')]
        temp = int(tokens[10])
        Stillwater = ['Stillwater',tokens[16],tokens[15],temp]
        
        # create an update string
        sIndicator = " ~ %s %sF ~ %s %s ~ " % (str(temp), self.degree_symbol, str(Stillwater[1]), str(Stillwater[2]))
        
        # update the menu item to say we have updated
        self.menu_update_item.set_label("Updated at: " + str(datetime.now()))
        
        # update the indicator label with new data
        self.ind.set_label(sIndicator)
        
        # send a notification message
	if os.path.isdir("/home/edwin/Programs/im-ok-weather"):
		wd = "/home/edwin/Programs/im-ok-weather"
	else:
		wd = os.getcwd() # will default to $HOME if opened from Unity
	print wd
        sNotify = "Temperature:\t%s\nWind Speed:\t%s\nWind Direction:\t%s" % (str(temp), str(Stillwater[1]), str(Stillwater[2]))
        self.notification = Notify.Notification.new ("Stillwater Weather Updated", sNotify, wd+"/icon.png") 
        self.notification.show()
        
        # callback return value, so that gobject knows it can continue cycling
        return True
                
    def main(self):
        gtk.main()

if __name__ == "__main__":        
    Weather().main()
   
